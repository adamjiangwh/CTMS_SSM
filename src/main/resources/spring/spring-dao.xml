<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                            http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/context
                            http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 基本属性driverClassName url、user、password -->
        <property name="driverClassName" value="${druid.driver}"/>
        <property name="url" value="${druid.url}"/>
        <property name="username" value="${druid.username}"/>
        <property name="password" value="${druid.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>

        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>

        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <property name="filters" value="${druid.filters}"/>
    </bean>



    <context:property-placeholder location="classpath:druid.properties" ignore-unresolvable="true"/>

    <!-- 3:配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBatis全局配置文件 -->
        <property name="configLocation" value="classpath:mybaits/mybaits-config.xml"/>
        <!-- 扫描model包，使用别名cn.cnfia.dao.model -->
        <property name="typeAliasesPackage" value="com.zjsm.ctms.model"/>
        <!-- 扫描SQL配置文件：mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <!--&lt;!&ndash; 插件配置 &ndash;&gt;-->
        <!--<property name="plugins">-->
        <!--<array>-->
        <!--&lt;!&ndash; 分页插件配置 &ndash;&gt;-->
        <!--<bean id="paginationInterceptor" class="com.baomidou.mybatisplus.plugins.PaginationInterceptor">-->
        <!--&lt;!&ndash; 指定数据库方言 &ndash;&gt;-->
        <!--<property name="dialectType" value="mysql"/>-->
        <!--</bean>-->
        <!--&lt;!&ndash; 如需要开启其他插件，可配置于此 &ndash;&gt;-->
        <!--</array>-->
        <!--</property>-->
    </bean>

    <!-- 配置扫描Dao接口包，动态实现Dao接口，并注入到Spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory，防止提前错误的初始化 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 给出扫描DAO接口包 -->
        <property name="basePackage" value="com.zjsm.ctms.dao"/>
        <!-- applicationcontext中beanfactory初始化需要 -->
    </bean>
    <!--<bean id="tbGoodsMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
    <!--<property name="sqlSessionFactory" value="sqlSessionFactory" />-->
    <!--<property name="mapperInterface" value="com.rener.portal.dao.TbGoodsMapper"></property>-->
    <!--</bean>-->

    <context:component-scan base-package="com.zjsm.ctms.dao"/>

</beans>